!function(){"use strict";const e=e=>{const t=document.querySelector("#table-body");try{t.innerHTML="",e.forEach((e=>{t.insertAdjacentHTML("beforeend",`\n            <tr data-key="${e.id}">\n                <th scope="row">${e.id}</th>\n                <td>${e.name}</td>\n                <td>${e.email}</td>\n                <td>${e.children?"Есть":"Нет"}</td>\n                <td>\n                    <div class="form-check form-switch">\n                        <input class="form-check-input" type="checkbox" role="switch"\n                            id="form-children" ${e.permissions?"checked":""}>\n                    </div>\n                </td>\n                <td>\n                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">\n                        <button type="button" class="btn btn-warning btn-edit">\n                            <i class="bi-pencil-square"></i>\n                        </button>\n                        <button type="button" class="btn btn-danger btn-remove">\n                            <i class="bi-person-x"></i>\n                        </button>\n                    </div>\n                </td>\n            </tr>\n            `)}))}catch(e){console.log(`Ошибка рендеринга!\n${e.message}`);const t=document.createElement("div");t.innerHTML='<div style="text-align: center; color: red; font-size: 22px;">Произошла ошибка, данные не были получены!</div>',document.querySelector(".table").after(t)}},t=(e,t=300)=>{let n;return(...c)=>{clearTimeout(n),n=setTimeout((()=>{e.apply(void 0,c)}),t)}},n="https://grey-amethyst-hydrogen.glitch.me/users/";window.userService=new class{getData(e,t=""){return fetch(`${e}${t}`).then((e=>e.json())).catch((e=>{console.log(`Ошибка получения данных!\n${e.message}`)}))}changeData(e,t,n="",c={}){let r;return r="DELETE"!==t?{method:t,body:JSON.stringify(c),headers:{"Content-Type":"application/json"}}:{method:t},fetch(`${e}${n}`,r).then((e=>e.json())).catch((e=>{console.log(`Ошибка отправки данных!\n${e.message}`)}))}},(t=>{const n=document.querySelector(".loading-container");n.style.display="block",userService.getData(t).then((t=>{n.style.display="none",e(t)}))})(n),(t=>{const n=document.querySelector("form"),c=document.querySelector("#form-name"),r=document.querySelector("#form-email"),o=document.querySelector("#form-children");n.addEventListener("submit",(a=>{if(a.preventDefault(),!n.dataset.method){const a={name:c.value,email:r.value,children:o.checked,permissions:!1};userService.changeData(t,"POST",void 0,a).then((()=>{userService.getData(t).then((t=>{e(t),n.reset()}))}))}}))})(n),(t=>{document.querySelector("#table-body").addEventListener("click",(n=>{if(n.target.closest(".btn-remove")){const c=n.target.closest("tr").dataset.key;userService.changeData(t,"DELETE",c).then((()=>{userService.getData(t).then((t=>e(t)))}))}}))})(n),(e=>{document.querySelector("#table-body").addEventListener("click",(t=>{try{if(t.target.closest("input[type=checkbox]")){const n=t.target.closest("tr"),c=n.querySelector("input[type=checkbox]"),r=n.dataset.key;userService.changeData(e,"PATCH",r,{permissions:c.checked})}}catch(e){console.log(`Ошибка отправки данных!\n${e.message}`);const t=document.createElement("div");t.innerHTML='<div style="text-align: center; color: red; font-size: 22px;">Произошла ошибка, данные не были отправлены!</div>',document.querySelector(".table").after(t)}}))})(n),(t=>{const n=document.querySelector("#table-body"),c=document.querySelector("form"),r=document.querySelector("#form-name"),o=document.querySelector("#form-email"),a=document.querySelector("#form-children");try{n.addEventListener("click",(e=>{if(e.target.closest(".btn-edit")){const n=e.target.closest("tr").dataset.key;userService.getData(t,n).then((e=>{r.value=e.name,o.value=e.email,a.checked=e.children,c.dataset.method=n}))}}))}catch(e){console.log(`Ошибка запроса!\n${e.message}`);const t=document.createElement("div");t.innerHTML='<div style="text-align: center; color: red; font-size: 22px;">Произошла ошибка, данные не были получены!</div>',document.querySelector(".table").after(t)}c.addEventListener("submit",(n=>{n.preventDefault();try{if(c.dataset.method){const n=c.dataset.method,s={name:r.value,email:o.value,children:a.checked,permissions:!1};userService.changeData(t,"PUT",n,s).then((()=>{userService.getData(t).then((t=>{e(t),c.reset(),c.removeAttribute("data-method")}))}))}}catch(e){console.log(`Ошибка отправки данных!\n${e.message}`);const t=document.createElement("div");t.innerHTML='<div style="text-align: center; color: red; font-size: 22px;">Произошла ошибка, данные не были отправлены!</div>',document.querySelector(".table").after(t)}}))})(n),(t=>{const n=document.getElementById("btn-isChildren"),c=document.getElementById("btn-isPermissions"),r=document.getElementById("btn-isAll");n.addEventListener("click",(()=>{userService.getData(t,"?children=true").then((t=>{e(t)}))})),c.addEventListener("click",(()=>{userService.getData(t,"?permissions=true").then((t=>{e(t)}))})),r.addEventListener("click",(()=>{userService.getData(t).then((t=>{e(t)}))}))})(n),(t=>{document.querySelector(".table-dark").addEventListener("click",(n=>{const c=n.target.closest("th");if("actions"!==c.dataset.column){const n=c.dataset.column;let r="false"!==c.dataset.sort;userService.getData(t,`?_sort=${n}&_order=${r?"asc":"desc"}`).then((t=>{e(t)})),c.dataset.sort=!r}}))})(n),(n=>{const c=document.getElementById("search-input"),r=t((()=>{userService.getData(n,`?name_like=${c.value}`).then((n=>{e(n),t()}))}),400);c.addEventListener("input",r)})(n)}();